(function(global){const kitmodule=global.kitmodule||(global.kitmodule={});function kitAST(tokens){let i=0;const PRECEDENCE={"||":1,"&&":2,"==":3,"!=":3,"===":3,"!==":3,"<":4,">":4,"<=":4,">=":4,"+":5,"-":5,"*":6,"/":6,"%":6};function peek(offset=0){return tokens[i+offset]}function consume(){return tokens[i++]}function match(type,value){const token=peek();return token&&token.type===type&&(!value||token.value===value)}function expect(type,value){const token=consume();if(!token||token.type!==type||value&&token.value!==value)throw new Error(`Expected ${type} '${value}', got ${token?.type} '${token?.value}'`);return token}function parseMemberExpression(expr){for(;!0;)if(match("punctuator",".")){consume();const property=parsePrimary();expr={type:"MemberExpression",object:expr,property,computed:!1}}else if(match("bracket","[")){consume();const property=parseExpression();expect("bracket","]"),expr={type:"MemberExpression",object:expr,property,computed:!0}}else break;return expr}function parseCallee(){const token=peek();if(token.type==="identifier"){const idToken=consume();let expr={type:"Identifier",name:idToken.value};return expr=parseMemberExpression(expr),expr}if(match("paren","(")){consume();const expr=parseExpression();return expect("paren",")"),expr}throw new Error("Expected constructor (identifier or member) after 'new'")}function parsePrimary(){const token=peek();if(!token)throw new Error("Unexpected end of input");if(token.type==="identifier"&&token.value==="new"){consume();const callee=parseCallee();expect("paren","(");const args=[];if(!match("paren",")"))do args.push(parseExpression());while(match("punctuator",",")&&consume())return expect("paren",")"),{type:"NewExpression",callee,arguments:args}}if(match("paren","(")){consume();const expr=parseExpression();return expect("paren",")"),expr}if(match("brace","{"))return parseObjectExpression();if(match("bracket","["))return parseArrayExpression();if(token.type==="number")return consume(),{type:"Literal",value:token.value};if(token.type==="string")return consume(),{type:"Literal",value:token.value};if(match("operator","++")||match("operator","--")){const op=consume().value,argument=parsePrimary();return{type:"UpdateExpression",operator:op,argument,prefix:!0}}if(token.type==="identifier"){consume();let node={type:"Identifier",name:token.value};if(match("operator","++")||match("operator","--")){const op=consume().value;return{type:"UpdateExpression",operator:op,argument:node,prefix:!1}}return node}if(token.type==="operator"&&["!","+","-","~"].includes(token.value)){const op=token.value;consume();const argument=parsePrimary();return{type:"UnaryExpression",operator:op,argument,prefix:!0}}throw new Error(`Unexpected token: ${token.type} ${token.value}`)}function parseMemberAndCall(expr){for(;!0;)if(match("punctuator",".")){consume();const property=parsePrimary();expr={type:"MemberExpression",object:expr,property,computed:!1}}else if(match("bracket","[")){consume();const property=parseExpression();expect("bracket","]"),expr={type:"MemberExpression",object:expr,property,computed:!0}}else if(match("paren","(")){consume();const args=[];if(!match("paren",")"))do args.push(parseExpression());while(match("punctuator",",")&&consume())expect("paren",")"),expr={type:"CallExpression",callee:expr,arguments:args}}else break;return expr}function parseBinaryExpression(minPrecedence=0){let left=parseMemberAndCall(parsePrimary());for(;!0;){const token=peek();if(!token||token.type!=="operator")break;const precedence=PRECEDENCE[token.value];if(precedence===0[0]||precedence<minPrecedence)break;const op=token.value;consume();const right=parseBinaryExpression(precedence+1);left={type:"BinaryExpression",operator:op,left,right}}return left}function parseTernary(){let test=parseBinaryExpression();if(match("punctuator","?")){consume();const consequent=parseExpression();expect("punctuator",":");const alternate=parseExpression();return{type:"ConditionalExpression",test,consequent,alternate}}return test}function parseAssignment(){const left=parseTernary();if(match("operator","=")){const op=consume().value,right=parseAssignment();return{type:"AssignmentExpression",operator:op,left,right}}return left}function parseArrayExpression(){expect("bracket","[");const elements=[];for(;!match("bracket","]");)elements.push(parseExpression()),match("bracket","]")||expect("punctuator",",");return expect("bracket","]"),{type:"ArrayExpression",elements}}function parseObjectExpression(){expect("brace","{");const properties=[];for(;!match("brace","}");){const keyToken=expect("identifier"),key={type:"Identifier",name:keyToken.value};expect("punctuator",":");const value=parseExpression();properties.push({type:"Property",key,value}),match("brace","}")||expect("punctuator",",")}return expect("brace","}"),{type:"ObjectExpression",properties}}function parseExpression(){return parseAssignment()}function parseProgram(){const body=[];for(;i<tokens.length;){const expr=parseExpression();if(body.push(expr),match("semicolon",";"))consume();else break}return{type:"Program",body}}return parseProgram()}kitmodule.ast=kitAST})(typeof window!="undefined"?window:globalThis)