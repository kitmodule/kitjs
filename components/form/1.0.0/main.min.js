Kit.define("form",{validity:!1,loading:!1,error:"",success:"",async submit(event){if(!event)return;event.preventDefault();const element=event.target,action=element.action,method=(element.method||"get").toLowerCase();this.loading=!0,this.error="",this.success="";const formData=await this.getFromData(element);try{const options={method};method!=="get"&&[...formData.entries()].length&&(options.body=formData);const response=await fetch(action,options),{success,redirect,message}=await response.json();if(success){if(redirect){location.assign(redirect);return}const next=this.getNext();if(next){location.assign(next);return}this.success=message;return}message&&(this.error=message)}catch(error){this.error=error?.message||String(error),console.error(error)}finally{this.loading=!1}},async getFromData(element){const encodeElements=element.querySelectorAll("[data-form-encode]")||[],formData=new FormData(element);if(encodeElements.length===0)return formData;for(const el of encodeElements){const name=el.name,value=el.value;try{const token=await kitHasher(value).fetch(name);console.log(el.value),token&&(formData.delete(name),formData.append(name+"hash",token))}catch(error){this.error="Lá»—i khi fetch token:",error;return}}return formData},getNext(){const urlParams=new URLSearchParams(window.location.search),next=urlParams.get("next");function isInternal(path){if(!path)return!1;try{const url=new URL(path,window.location.origin);return url.hostname===window.location.hostname}catch{return typeof path=="string"&&path.startsWith("/")&&!path.startsWith("//")&&!path.includes("://")}}return isInternal(next)?next:0[0]}})